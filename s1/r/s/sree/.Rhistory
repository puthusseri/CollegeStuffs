print(li)
smoke <- table(lsmokerdata$smoke,smokerdata$SES)
smoke
smoke <- table(mokerdata$smoke,smokerdata$SES)
smoke <- table(smokerdata$smoke,smokerdata$SES)
smokerdata=read.csv("/var/nfs/.home/mca2017/mca1752/Downloads/smoker.csv")
print(li)
smoke <-table(smokerdata$Smoke,smokerdata$SES)
smoke
prop.table(smokerdata)
prop.table(smokerdata)
prop.table(smoke)
write.table(smoke,"/var/nfs/.home/mca2017/mca1752/R/sree/smoker.txt", sep="\t")
write.table(smoke,"/var/nfs/.home/mca2017/mca1752/R/sree/smoker.csv", sep="\t")
smokerdata=read.csv("/var/nfs/.home/mca2017/mca1752/Downloads/smoker.csv")
print(li)
smoke <-table(smokerdata$Smoke,smokerdata$SES)
smoke
prop.table(smoke)
write.table(smoke,"/var/nfs/.home/mca2017/mca1752/R/sree/smoker.csv", sep="\t")
smokerdata=read.csv("/var/nfs/.home/mca2017/mca1752/Downloads/smoker.csv")
print(li)
smoke <-table(smokerdata$Smoke,smokerdata$SES)
smoke
prop.table(smoke)
write.table(smoke,"/var/nfs/.home/mca2017/mca1752/R/sree/smoker.txt", sep="\t")
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
setwd("~/R/sree")
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
mean_price=apply(price[2:4],2,mean)
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
mean_price=apply(price[2:4],2,mean)
mean_price
smokerdata=read.csv("smoker.csv")
sink("smk.txt")
cat("\t=========SUMMARY==========\n")
summary(smokerdata)
smoke <-table(smokerdata$Smoke,smokerdata$SES)
smoke
cat("\t==============PROPORTION=============\n")
prop.table(smoke)
sink()
outcomes<-c(sample(1:6,size = 10000,replace = TRUE))
probability_function<-table(outcomes)
print(probability_function)
plot(probability_function)
probability_function=probability_function/10000
print(probability_function)
sum(probability_function)
fourier_series<-function(limit,values_of_x)
{
sum_of_sines<-0
for(i in seq(from=1,by=2,length.out = limit))
{
sum_of_sines<-sum_of_sines+sin(values_of_x*i)/i
}
sum_of_series<-pi/2+2*sum_of_sines
return(sum_of_series)
}
x1=seq(from=-4,to=4,by=.1)
par(mfrow=c(2,2))
plot(x1,fourier_series(3,x1),type="l",main="plot of 3 fourier",ylab="s_3(x1)")
plot(x1,fourier_series(10,x1),type="l",main="plot of 10 fourier",ylab="s_10(x1)")
plot(x1,fourier_series(20,x1),type="l",main="plot of 20 fourier",ylab="s_20(x1)")
plot(x1,fourier_series(50,x1),type="l",main="plot of 50 fourier",ylab="s_50(x1)")
m<-as.matrix(read.table(file="sales.txt",skip=2))
m1=m[1:3,1:3]
m2=m[1:3,4:6]
m3=m[1:3,7:9]
m4=m1*m2*m3
sink("salebill.txt",split=2)
cat("================================\n")
cat("\n\tPrice of Item\n")
print(m1)
cat("================================\n")
cat("\tDiscount Factor\n\n")
print(m2)
cat("================================\n")
cat("\tSales Volume\n\n")
print(m3)
cat("================================\n")
cat("\t\tSales bill\n\n")
print(m4)
sink()
setwd("~/R/sree")
m<-as.matrix(read.table(file="sales.txt",skip=2))
m1=m[1:3,1:3]
m2=m[1:3,4:6]
m3=m[1:3,7:9]
m4=m1*m2*m3
sink("salebill.txt",split=2)
cat("================================\n")
cat("\n\tPrice of Item\n")
print(m1)
cat("================================\n")
cat("\tDiscount Factor\n\n")
print(m2)
cat("================================\n")
cat("\tSales Volume\n\n")
print(m3)
cat("================================\n")
cat("\t\tSales bill\n\n")
print(m4)
sink()
age_group<-sample(c("40-45","45-50","50-55","55-60"), size=1000, replace=TRUE)
bp<-sample(c("low","mid","high"),size=1000,replace=TRUE)
patient_data<-data.frame(age_group,bp)
table1<-table(patient_data)
patient_prob<-prop.table(table1)
patient_prob
percentage<-patient_prob*100
percentage2<-addmargins(percentage)
sink("patient-data.txt",split = 5)
cat("======================================================\n")
cat("Percentage of people having BP in different age groups\n")
cat("======================================================\n")
print(percentage2)
cat("======================================================\n")
sink()
m<-as.matrix(read.table(file="sales.txt",skip=2))
m1=m[1:3,1:3]
m2=m[1:3,4:6]
m3=m[1:3,7:9]
m4=m1*m2*m3
sink("salebill.txt",split=2)
cat("================================\n")
cat("\n\tPrice of Item\n")
print(m1)
cat("================================\n")
cat("\tDiscount Factor\n\n")
print(m2)
cat("================================\n")
cat("\tSales Volume\n\n")
print(m3)
cat("================================\n")
cat("\t\tSales bill\n\n")
print(m4)
sink()
smokerdata=read.csv("smoker.csv")
sink("smk.txt")
cat("\t=========SUMMARY==========\n")
summary(smokerdata)
smoke <-table(smokerdata$Smoke,smokerdata$SES)
smoke
cat("\t==============PROPORTION=============\n")
prop.table(smoke)
sink()
smoke
outcomes<-c(sample(1:6,size = 10000,replace = TRUE))
probability_function<-table(outcomes)
print(probability_function)
plot(probability_function)
probability_function=probability_function/10000
print(probability_function)
sum(probability_function)
smokerdata=read.csv("smoker.csv")
sink("smk.txt")
cat("\t=========SUMMARY==========\n")
summary(smokerdata)
smoke <-table(smokerdata$Smoke,smokerdata$SES)
smoke
cat("\t==============PROPORTION=============\n")
prop.table(smoke)
sink()
smoke
smokerdata=read.csv("smoker.csv")
sink("smk.txt")
cat("\t=========SUMMARY==========\n")
summary(smokerdata)
smoke <-table(smokerdata$Smoke,smokerdata$SES)
smoke
cat("\t==============PROPORTION=============\n")
a=prop.table(smoke)
sink()
a
outcomes<-c(sample(1:6,size = 10000,replace = TRUE))
probability_function<-table(outcomes)
print(probability_function)
plot(probability_function)
probability_function=probability_function/10000
print(probability_function)
sum(probability_function)
outcomes<-c(sample(1:6,size = 10000,replace = TRUE))
probability_function<-table(outcomes)
print(probability_function)
plot(probability_function)
probability_function=probability_function/10000
print(probability_function)
sum(probability_function)
fourier_series<-function(limit,values_of_x)
{
sum_of_sines<-0
for(i in seq(from=1,by=2,length.out = limit))
{
sum_of_sines<-sum_of_sines+sin(values_of_x*i)/i
}
sum_of_series<-pi/2+2*sum_of_sines
return(sum_of_series)
}
x1=seq(from=-4,to=4,by=.1)
par(mfrow=c(2,2))
plot(x1,fourier_series(3,x1),type="l",main="plot of 3 fourier",ylab="s_3(x1)")
plot(x1,fourier_series(10,x1),type="l",main="plot of 10 fourier",ylab="s_10(x1)")
plot(x1,fourier_series(20,x1),type="l",main="plot of 20 fourier",ylab="s_20(x1)")
plot(x1,fourier_series(50,x1),type="l",main="plot of 50 fourier",ylab="s_50(x1)")
m<-as.matrix(read.table(file="sales.txt",skip=2))
m1=m[1:3,1:3]
m2=m[1:3,4:6]
m3=m[1:3,7:9]
m4=m1*m2*m3
sink("salebill.txt",split=2)
cat("================================\n")
cat("\n\tPrice of Item\n")
print(m1)
cat("================================\n")
cat("\tDiscount Factor\n\n")
print(m2)
cat("================================\n")
cat("\tSales Volume\n\n")
print(m3)
cat("================================\n")
cat("\t\tSales bill\n\n")
print(m4)
sink()
m1
setwd("~/R/sree")
m<-as.matrix(read.table(file="sales.txt",skip=2))
m1=m[1:3,1:3]
m2=m[1:3,4:6]
m3=m[1:3,7:9]
m4=m1*m2*m3
sink("salebill.txt",split=2)
cat("================================\n")
cat("\n\tPrice of Item\n")
print(m1)
cat("================================\n")
cat("\tDiscount Factor\n\n")
print(m2)
cat("================================\n")
cat("\tSales Volume\n\n")
print(m3)
cat("================================\n")
cat("\t\tSales bill\n\n")
print(m4)
sink()
age_group<-sample(c("40-45","45-50","50-55","55-60"), size=1000, replace=TRUE)
bp<-sample(c("low","mid","high"),size=1000,replace=TRUE)
patient_data<-data.frame(age_group,bp)
table1<-table(patient_data)
patient_prob<-prop.table(table1)
patient_prob
percentage<-patient_prob*100
percentage2<-addmargins(percentage)
sink("patient-data.txt",split = 5)
cat("======================================================\n")
cat("Percentage of people having BP in different age groups\n")
cat("======================================================\n")
print(percentage2)
cat("======================================================\n")
sink()
outcomes<-c(sample(1:6,size = 10000,replace = TRUE))
probability_function<-table(outcomes)
print(probability_function)
plot(probability_function)
probability_function=probability_function/10000
print(probability_function)
sum(probability_function)
m<-as.matrix(read.table(file="sales.txt",skip=2))
m1=m[1:3,1:3]
m2=m[1:3,4:6]
m3=m[1:3,7:9]
m4=m1*m2*m3
sink("salebill.txt",split=2)
cat("================================\n")
cat("\n\tPrice of Item\n")
print(m1)
cat("================================\n")
cat("\tDiscount Factor\n\n")
print(m2)
cat("================================\n")
cat("\tSales Volume\n\n")
print(m3)
cat("================================\n")
cat("\t\tSales bill\n\n")
print(m4)
sink()
setwd("~/R/sree")
m<-as.matrix(read.table(file="sales.txt",skip=2))
m1=m[1:3,1:3]
m2=m[1:3,4:6]
m3=m[1:3,7:9]
m4=m1*m2*m3
sink("salebill.txt",split=2)
cat("================================\n")
cat("\n\tPrice of Item\n")
print(m1)
cat("================================\n")
cat("\tDiscount Factor\n\n")
print(m2)
cat("================================\n")
cat("\tSales Volume\n\n")
print(m3)
cat("================================\n")
cat("\t\tSales bill\n\n")
print(m4)
sink()
setwd("~/R/sree")
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
mean_price=apply(price[2:4],2,mean)
mean_price
std=apply(price[2:4],2,sd)
std
quartile=apply(price[2:4],2,quantile)
quartile
iqr=apply(price[2:4],2,IQR)
iqr
qd=iqr/2
qd
price1_data<-rbind(price_data[2:4],mean_price,std,quartile,qd)
price1_data
sink("price1_data.txt",split = 2)
cat("------------------------------\n")
cat("rate of items\n")
cat("=------------------------------\n")
print(price1_data)
cat("--------------------------------\n")
sink()
par(mfrow=c(2,2))
plot.ts(price_data[2:4])
plot.ts(price_data[2])
plot.ts(price_data[3])
plot.ts(price_data[4])
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
mean_price=apply(price[2:4],2,mean)
mean_price
std=apply(price[2:4],2,sd)
std
quartile=apply(price[2:4],2,quantile)
quartile
iqr=apply(price[2:4],2,IQR)
iqr
qd=iqr/2
qd
price1_data=rbind(price_data[2:4],mean_price,std,quartile,qd)
price1_data
sink("price1_data.txt",split = 2)
cat("------------------------------\n")
cat("rate of items\n")
cat("=------------------------------\n")
print(price1_data)
cat("--------------------------------\n")
sink()
par(mfrow=c(2,2))
plot.ts(price_data[2:4])
plot.ts(price_data[2])
plot.ts(price_data[3])
plot.ts(price_data[4])
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
mean_price=apply(price_data[2:4],2,mean)
mean_price
std=apply(price[2:4],2,sd)
std
quartile=apply(price[2:4],2,quantile)
quartile
iqr=apply(price[2:4],2,IQR)
iqr
qd=iqr/2
qd
price1_data=rbind(price_data[2:4],mean_price,std,quartile,qd)
price1_data
sink("price1_data.txt",split = 2)
cat("------------------------------\n")
cat("rate of items\n")
cat("=------------------------------\n")
print(price1_data)
cat("--------------------------------\n")
sink()
par(mfrow=c(2,2))
plot.ts(price_data[2:4])
plot.ts(price_data[2])
plot.ts(price_data[3])
plot.ts(price_data[4])
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
mean_price=apply(price[2:4],2,mean)
mean_price
std=apply(price[2:4],2,sd)
std
quartile=apply(price[2:4],2,quantile)
quartile
iqr=apply(price[2:4],2,IQR)
iqr
qd=iqr/2
qd
price1_data=rbind(price_data[2:4],mean_price,std,quartile,qd)
price1_data
sink("price1_data.txt",split = 2)
cat("------------------------------\n")
cat("rate of items\n")
cat("=------------------------------\n")
print(price1_data)
cat("--------------------------------\n")
sink()
par(mfrow=c(2,2))
plot.ts(price_data[2:4])
plot.ts(price_data[2])
plot.ts(price_data[3])
plot.ts(price_data[4])
setwd("~/R/sree")
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
mean_price=apply(price[2:4],2,mean)
mean_price
std=apply(price[2:4],2,sd)
std
quartile=apply(price[2:4],2,quantile)
quartile
iqr=apply(price[2:4],2,IQR)
iqr
qd=iqr/2
qd
price1_data=rbind(price_data[2:4],mean_price,std,quartile,qd)
price1_data
sink("price1_data.txt",split = 2)
cat("------------------------------\n")
cat("rate of items\n")
cat("=------------------------------\n")
print(price1_data)
cat("--------------------------------\n")
sink()
par(mfrow=c(2,2))
plot.ts(price_data[2:4])
plot.ts(price_data[2])
plot.ts(price_data[3])
plot.ts(price_data[4])
price_data=as.data.frame(read.table(file="price.txt",skip=1))
price_data
mean_price=apply(price_data[2:4],2,mean)
mean_price
std=apply(price_data[2:4],2,sd)
std
quartile=apply(price_data[2:4],2,quantile)
quartile
iqr=apply(price_data[2:4],2,IQR)
iqr
qd=iqr/2
qd
price1_data=rbind(price_data[2:4],mean_price,std,quartile,qd)
price1_data
sink("price1_data.txt",split = 2)
cat("------------------------------\n")
cat("rate of items\n")
cat("=------------------------------\n")
print(price1_data)
cat("--------------------------------\n")
sink()
par(mfrow=c(2,2))
plot.ts(price_data[2:4])
plot.ts(price_data[2])
plot.ts(price_data[3])
plot.ts(price_data[4])
mn<-c(1:12)
mn
sl<-c(105,135,120,105,90,120,145,140,100,80,100,110)
sl
plot(mn,sl,main="MONTH VERSUS SALES")
t=c(sl[1],sum(sl[2:4])/3,sum(sl[3:5])/3,sum(sl[4:6])/3,sum(sl[5:7])/3,sum(sl[6:8])/3,sum(sl[7:9])/3,sum(sl[8:10])/3,sum(sl[9:11])/3,sum(sl[10:12])/3,sl[12])
lines.ts(t)
plot(t,type="l")
height_x=c(151,174,138,186,128,136,179,163,152,131)
weight_y=c(63,81,56,91,47,57,76,72,62,48)
reg_model=lm(weight_y ~ height_x)
summary(reg_model)
resid(reg_model)
predict(reg_model)
a=data.frame(height_x=170)
b=data.frame(height_x=180)
result_a=predict(reg_model,a)
result_b=predict(reg_model,b)
result_a
result_b
plot(weight_y,height_x,main="REGRESSION LINE",abline(lm(height_x ~ weight_y)))
lines.ts(t)
lines.ts(t)
mn<-c(1:12)
mn
sl<-c(105,135,120,105,90,120,145,140,100,80,100,110)
sl
plot(mn,sl,main="MONTH VERSUS SALES")
t=c(sl[1],sum(sl[2:4])/3,sum(sl[3:5])/3,sum(sl[4:6])/3,sum(sl[5:7])/3,sum(sl[6:8])/3,sum(sl[7:9])/3,sum(sl[8:10])/3,sum(sl[9:11])/3,sum(sl[10:12])/3,sl[12])
lines.ts(t)
plot(t,type="l")
t
height_x=c(151,174,138,186,128,136,179,163,152,131)
weight_y=c(63,81,56,91,47,57,76,72,62,48)
reg_model=lm(weight_y ~ height_x)
summary(reg_model)
resid(reg_model)
predict(reg_model)
a=data.frame(height_x=170)
b=data.frame(height_x=180)
result_a=predict(reg_model,a)
result_b=predict(reg_model,b)
result_a
result_b
plot(weight_y,height_x,main="REGRESSION LINE",abline(lm(height_x ~ weight_y)))
